package io.provis.jenkins.config.git;

import java.io.IOException;

import io.provis.jenkins.config.Configuration;
import io.provis.jenkins.config.ConfigurationMixin;
import io.provis.jenkins.config.MasterConfiguration.MasterConfigurationBuilder;
import io.provis.jenkins.config.templates.TemplateList;

public class GithubPluginConfig implements ConfigurationMixin {

  private String webUrl;
  private String apiUrl;
  private String username;
  private String oauthTokenId;
  private String oauthToken;
  private boolean manageHooks;

  public GithubPluginConfig() {}

  @Override
  public GithubPluginConfig init(Configuration config) {
    config
      .value("webUrl", this::webUrl)
      .value("apiUrl", this::apiUrl)
      .value("username", this::username)
      .value("oauthTokenId", this::oauthTokenId)
      .value("oauthToken", this::oauthToken)
      .boolValue("manageHooks", this::manageHooks);
    return this;
  }
  
  public GithubPluginConfig webUrl(String webUrl) {
    this.webUrl = webUrl;
    return this;
  }
  
  public GithubPluginConfig apiUrl(String apiUrl) {
    this.apiUrl = apiUrl;
    return this;
  }
  
  public GithubPluginConfig oauthTokenId(String oauthTokenId) {
    this.oauthTokenId = oauthTokenId;
    return this;
  }
  
  public GithubPluginConfig username(String username) {
    this.username = username;
    return this;
  }
  
  public GithubPluginConfig oauthToken(String oauthToken) {
    this.oauthToken = oauthToken;
    return this;
  }
  
  public GithubPluginConfig manageHooks(boolean manageHooks) {
    this.manageHooks = manageHooks;
    return this;
  }

  public String getWebUrl() {
    return webUrl;
  }

  public String getApiUrl() {
    return apiUrl;
  }
  
  public String getUsername() {
    return username;
  }

  public String getOauthTokenId() {
    return oauthTokenId;
  }
  
  public String getOauthToken() {
    return oauthToken;
  }
  
  public boolean isManageHooks() {
    return manageHooks;
  }

  @Override
  public String getId() {
    return "github";
  }

  @Override
  public void configure(MasterConfigurationBuilder builder) throws IOException {
    String domainDesc = String.format("%s domain (autogenerated)", apiUrl);
    String description = String.format("GitHub (%s) auto generated token credentials for %s", apiUrl, username);
    builder.credentials().secretCredential(oauthTokenId, description, oauthToken, apiUrl, domainDesc);
    builder.templates(TemplateList.list(GithubPluginConfig.class));
  }

}
