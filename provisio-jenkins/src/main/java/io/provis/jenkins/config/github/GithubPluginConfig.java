package io.provis.jenkins.config.github;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import io.provis.jenkins.config.Configuration;
import io.provis.jenkins.config.ConfigurationMixin;
import io.provis.jenkins.config.MasterConfiguration.MasterConfigurationBuilder;
import io.provis.jenkins.config.templates.TemplateList;

public class GithubPluginConfig implements ConfigurationMixin {

  private static final Server DEFAULT_GH_SERVER = new Server("", "https://github.com", "https://api.github.com", null, null, null, false);

  private List<Server> servers;

  public GithubPluginConfig() {
    servers = new ArrayList<>();
    servers.add(DEFAULT_GH_SERVER);
  }

  @Override
  public GithubPluginConfig init(Configuration config) {
    config.partition().forEach((id, c) -> server(
      id,
      c.get("webUrl"),
      c.get("apiUrl"),
      c.get("username"),
      c.get("oauthTokenId"),
      c.get("oauthToken"),
      c.getBool("manageHooks")));
    return this;
  }

  public GithubPluginConfig server(String id, String webUrl, String apiUrl, String username, String oauthTokenId, String oauthToken, boolean manageHooks) {
    if (apiUrl != null) {
      if (oauthTokenId == null && oauthToken != null) {
        oauthTokenId = UUID.randomUUID().toString();
      }
      if (apiUrl.contains("api.github.com")) {
        servers.remove(DEFAULT_GH_SERVER);
      }
      servers.add(new Server(id, webUrl, apiUrl, username, oauthTokenId, oauthToken, manageHooks));
    }
    return this;
  }

  public List<Server> getServers() {
    return servers;
  }

  public Server server(String id) {
    for (Server s : servers) {
      if (s.getId().equals(id)) {
        return s;
      }
    }
    throw new IllegalArgumentException("No such server " + id);
  }

  @Override
  public String getId() {
    return "github";
  }

  @Override
  public void configure(MasterConfigurationBuilder builder) {
    for (Server s : servers) {
      if (s.getOauthToken() != null) {
        String domainDesc = String.format("%s domain (autogenerated)", s.getApiUrl());
        String description = String.format("GitHub (%s) auto generated token credentials for %s", s.getApiUrl(), s.getUsername());
        builder.credentials().secretCredential(s.getOauthTokenId(), description, s.getOauthToken(), s.getApiUrl(), domainDesc);
      }
    }
    builder.templates(TemplateList.list(GithubPluginConfig.class));
  }

  public static class Server {
    private String id;
    private String webUrl;
    private String apiUrl;
    private String username;
    private String oauthTokenId;
    private String oauthToken;
    private boolean manageHooks;

    public Server(String id, String webUrl, String apiUrl, String username, String oauthTokenId, String oauthToken, boolean manageHooks) {
      this.id = id;
      this.webUrl = webUrl;
      this.apiUrl = apiUrl;
      this.username = username;
      this.oauthTokenId = oauthTokenId;
      this.oauthToken = oauthToken;
      this.manageHooks = manageHooks;
    }

    public String getId() {
      return id;
    }

    public String getWebUrl() {
      return webUrl;
    }

    public String getApiUrl() {
      return apiUrl;
    }

    public String getUsername() {
      return username;
    }

    public String getOauthTokenId() {
      return oauthTokenId;
    }

    public String getOauthToken() {
      return oauthToken;
    }

    public boolean isManageHooks() {
      return manageHooks;
    }
  }
}
